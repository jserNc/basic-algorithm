/*
给定二维空间中四点的坐标，返回四点是否可以构造一个正方形。

一个点的坐标（x，y）由一个有两个整数的整数数组表示。

示例:

输入: p1 = [0,0], p2 = [1,1], p3 = [1,0], p4 = [0,1]
输出: True
 

注意:

所有输入整数都在 [-10000，10000] 范围内。
一个有效的正方形有四个等长的正长和四个等角（90度角）。
输入点没有顺序。
*/

/**
 * @param {number[]} p1
 * @param {number[]} p2
 * @param {number[]} p3
 * @param {number[]} p4
 * @return {boolean}
 */
var validSquare = function(p1, p2, p3, p4) {
  const p1到其他点的距离 = [p2, p3, p4].map(p => (p[0] - p1[0]) * (p[0] - p1[0]) + (p[1] - p1[1]) * (p[1] - p1[1])).sort((a, b) => a - b)
  const p2到其他点的距离 = [p1, p3, p4].map(p => (p[0] - p2[0]) * (p[0] - p2[0]) + (p[1] - p2[1]) * (p[1] - p2[1])).sort((a, b) => a - b)
  const p3到其他点的距离 = [p1, p2, p4].map(p => (p[0] - p3[0]) * (p[0] - p3[0]) + (p[1] - p3[1]) * (p[1] - p3[1])).sort((a, b) => a - b)

  return p1到其他点的距离[0] > 0
         && p1到其他点的距离[2] === p1到其他点的距离[0] * 2
         && p1到其他点的距离[0] === p1到其他点的距离[1]
         && p2到其他点的距离[0] === p2到其他点的距离[1]
         && p3到其他点的距离[0] === p3到其他点的距离[1]
         && p1到其他点的距离[0] === p2到其他点的距离[0]
         && p1到其他点的距离[0] === p3到其他点的距离[0]
         && p1到其他点的距离[2] === p2到其他点的距离[2]
         && p1到其他点的距离[2] === p3到其他点的距离[2]
};
